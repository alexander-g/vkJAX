#version 450

layout (local_size_x = {{WORKGROUP_X}}) in;

layout(set = 0, binding = 0) writeonly buffer bout { {{DTYPE0}} result[]; };
layout(set = 0, binding = 1) readonly  buffer bina { {{DTYPE1}} in_a[]; };


//constants are injected in python
const uint N_A              = {{N_A}};
const uint SHAPE_A[N_A]     = uint[]{{SHAPE_A}};
const uint BCAST_DIM[N_A]   = uint[]{{BCAST_DIM}};

const uint N_OUT            = {{N_OUT}};
const uint SHAPE_OUT[N_OUT] = uint[]{{SHAPE_OUT}};



//include common.glsl twice
//first parameterized for N_A dimensions
#define N N_A
{{COMMON_GLSL}}
#undef N

//then (maybe) parameterized for N_OUT dimensions
#if {{N_A}} != {{N_OUT}}
    #define N N_OUT
    {{COMMON_GLSL}}
    #undef N
#endif


void main() {
    //broadcasts input by duplicating
    const uint _index = gl_GlobalInvocationID.x;
    //out-of-bounds guard
    const uint index  = _index * uint(_index < shape_to_size(SHAPE_OUT));
    
    const int  coords_out[N_OUT] = unravel_index(index, SHAPE_OUT);
          int  coords_a[N_A];
    for(int i=0; i<N_A; i++){
        uint dim = BCAST_DIM[i];
             dim = dim * uint(SHAPE_A[i] == SHAPE_OUT[dim]);
        coords_a[i] = coords_out[dim];
    }
    
    const uint index_a = ravel_coords(coords_a, SHAPE_A);
    result[index] = in_a[index_a];
}
