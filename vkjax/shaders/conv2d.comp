#version 450

layout (local_size_x = 32) in;

layout(set = 0, binding = 0) writeonly buffer bout { float result[]; };
layout(set = 0, binding = 1) readonly  buffer bina { float in_a[]; };   //lhs, image
layout(set = 0, binding = 2) readonly  buffer binb { float in_b[]; };   //rhs, kernel


//constants are injected in python
const uint N            = {{N}};   //number of dimensions
const uint SHAPE_A[N]   = uint[]( {{SHAPE_A}} );
const uint SHAPE_B[N]   = uint[]( {{SHAPE_B}} );
const uint SHAPE_OUT[N] = uint[]( {{SHAPE_OUT}} );
//jax.lax.ConvDimensionNumbers
const uint SPEC_LHS[N]  = uint[]( {{SPEC_LHS}} );
const uint SPEC_RHS[N]  = uint[]( {{SPEC_RHS}} );
const uint SPEC_OUT[N]  = uint[]( {{SPEC_OUT}} );
//padding (only low padding; left/top)
const uvec2 PADDING     = uvec2( {{PADDING}} );


int[N] unravel_index(uint index, uint[N] shape){
    int[N] coords;
    for(int i=int(N)-1; i>=0; i--){
        coords[i] = int(index % shape[i]);
        index     = index / shape[i]; 
    }
    return coords;
}

uint ravel_coords(int[N] coords, uint[N] shape){
    uint index  = 0;
    uint stride = 1;
    for(int i=int(N)-1; i>=0; i--){
        index  += coords[i]*stride;
        stride *= shape[i];
    }
    return index;
}

bool is_out_of_bounds(int[N] coords, uint[N] shape){
    bool is_oob = false;
    for(uint i=0; i<N; i++){
        is_oob = is_oob || (coords[i]<0 || coords[i]>=shape[i]);
    }
    return is_oob;
}


void main() {
    const uint index = gl_GlobalInvocationID.x;

    const int[N] coords_out = unravel_index(index, SHAPE_OUT);   //TODO: bounds check?

    float sum = 0.0;
    for(int c=0; c<SHAPE_B[SPEC_RHS[1]]; c++){                        //in feature dimension
        for(int i0=0; i0<SHAPE_B[SPEC_RHS[2]]; i0++){                 //spatial dimension 0
            for(int i1=0; i1<SHAPE_B[SPEC_RHS[3]]; i1++){             //spatial dimension 1
                int[N] coords_a, coords_b;

                const int j0 = int(i0) - int(PADDING[0]);
                const int j1 = int(i1) - int(PADDING[1]);
                coords_a[SPEC_LHS[0]] = coords_out[SPEC_OUT[0]];       //batch dimension
                coords_a[SPEC_LHS[1]] = c;                             //in feature dimension
                coords_a[SPEC_LHS[2]] = coords_out[SPEC_OUT[2]]+j0;    //spatial dimension 0
                coords_a[SPEC_LHS[3]] = coords_out[SPEC_OUT[3]]+j1;    //spatial dimension 1

                coords_b[SPEC_RHS[0]] = coords_out[SPEC_OUT[1]];       //out feature dimension
                coords_b[SPEC_RHS[1]] = c;                             //in feature dimension
                coords_b[SPEC_RHS[2]] = i0;                            //spatial dimension 0
                coords_b[SPEC_RHS[3]] = i1;                            //spatial dimension 1

                const bool is_oob     = is_out_of_bounds(coords_a, SHAPE_A);
                const uint index_a    = ravel_coords(coords_a, SHAPE_A) * uint(!is_oob);
                const uint index_b    = ravel_coords(coords_b, SHAPE_B);
                sum                  += in_a[index_a] * in_b[index_b] * float(!is_oob);

            }
        }
    }
    result[index] = sum;
}
