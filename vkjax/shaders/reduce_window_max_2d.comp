#version 450

layout (local_size_x = {{WORKGROUP_X}}) in;

layout(set = 0, binding = 0) writeonly buffer bout { float result[]; };
layout(set = 0, binding = 1) readonly  buffer bina { float in_a[]; };   //operand


//constants are injected in python
const uint N            = {{N}};   //number of dimensions
const uint SHAPE_A[N]   = uint[] {{SHAPE_A}} ;
const uint SHAPE_OUT[N] = uint[] {{SHAPE_OUT}} ;


//padding: only top/left padding values
const uint PADDING[N]   = uint[] {{PADDING}};
//window strides
const uint STRIDES[N]   = uint[] {{STRIDES}};
//window dimensions
const uint WINDOW[N]    = uint[] {{WINDOW}};


//file include: common.glsl
{{COMMON_GLSL}}




void main() {

    const uint index        = gl_GlobalInvocationID.x;
    const int[N] coords_out = unravel_index(index, SHAPE_OUT);
    const uint window_size  = shape_to_size(WINDOW);
    
    const float neg_infinity = uintBitsToFloat(0xFF800000);
    float acc = neg_infinity;
    for(int i=0; i<window_size; i++){
        const int[N] coords_window = unravel_index(i, WINDOW);
              int[N] coords_a      = multiply_coords(coords_out, STRIDES);
                     coords_a      = add_coords(coords_a, coords_window);
                     coords_a      = sub_coords(coords_a, PADDING);
        
        const bool is_oob_a        = is_out_of_bounds(coords_a, SHAPE_A);
        const uint index_a         = ravel_coords(coords_a, SHAPE_A) * uint(!is_oob_a);
        
        acc = max(acc, in_a[index_a] * float(!is_oob_a) );

        //result[index] = coords_a[2];
        //break;
    }
    result[index] = acc;
}
