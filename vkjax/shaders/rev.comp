#version 450

layout (local_size_x = 32) in;

layout(set = 0, binding = 0) writeonly buffer bout { float result[]; };
layout(set = 0, binding = 1) readonly  buffer bina { float in_a[]; };


//constants are injected in python
//number of input/output dimensions
const uint N            = {{N}};
//input/output shape e.g. (10,20,5,10)
const uint SHAPE[N]     = uint[] {{SHAPE}} ;
//dimensions to reverse 0/1 e.g (0,1,1,0) to reverse dims 1&2
const uint REVERSED_DIMS[N] = uint[] {{REVERSED_DIMS}} ;


//file include: common.glsl
{{COMMON_GLSL}}


//reverses the coordinates in the dimensions specified by REVERSED_DIMS
int[N] reverse_coords(int[N] coords){
    int[N] result;
    for(uint i=0; i<N; i++){
        const int c_i = coords[i];
        result[i]     = c_i + int(SHAPE[i] - 1 - c_i*2) * int(REVERSED_DIMS[i]);
    }
    return result;
}



void main() {
    const uint index           = gl_GlobalInvocationID.x;
    const int[N] coords_out    = unravel_index(index, SHAPE);
    const int[N] coords_a      = reverse_coords(coords_out);
    const uint index_a         = ravel_coords(coords_a, SHAPE);
    
    result[index] = in_a[index_a];
}
