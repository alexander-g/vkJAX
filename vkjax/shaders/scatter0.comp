#version 450

layout (local_size_x = 1) in;

layout(set = 0, binding = 0) buffer bout { float result[]; };
layout(set = 0, binding = 1) buffer bina { float in_a[]; };  //operand
layout(set = 0, binding = 2) buffer binb { float in_b[]; };  //indices
layout(set = 0, binding = 3) buffer binc { float in_c[]; };  //updates

void main() {
    //constants injected in python
    //in_a and result are a NxM matrix
    const uint N = {{N}};
    const uint M = {{M}};
    const uint index = gl_GlobalInvocationID.x;

    const uint row = index / M;
    const uint col = index % M;

    result[index] = in_a[index];

    for(int i=0; i<N; i++){
        const uint i0      = uint(in_b[i*2]);
        const uint i1      = uint(in_b[i*2+1]);
        const uint index_c = i;
        
        const uint should_add = uint((i0==row) && (i1==col));
        result[index] = result[index] + (in_c[index_c]*should_add);
    }

}